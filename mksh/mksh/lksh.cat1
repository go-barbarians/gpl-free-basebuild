LKSH(1)                   BSD General Commands Manual                  LKSH(1)

NNAAMMEE
     llkksshh -- Legacy Korn shell built on mksh

SSYYNNOOPPSSIISS
     llkksshh [--++aabbCCeeffhhiikkllmmnnpprrUUuuvvXXxx] [--++oo _o_p_t] [--cc _s_t_r_i_n_g | --ss | _f_i_l_e [_a_r_g_s _._._.]]

DDEESSCCRRIIPPTTIIOONN
     llkksshh is a command interpreter intended exclusively for running legacy
     shell scripts.  It is built on mmkksshh; refer to its manual page for details
     on the scripting language.  It is recommended to port scripts to mmkksshh
     instead of relying on legacy or objectionable POSIX-mandated behaviour,
     since the MirBSD Korn Shell scripting language is much more consistent.

     Do not use llkksshh as an interactive or login shell; use mmkksshh instead.

     Note that it's strongly recommended to invoke llkksshh with --oo ppoossiixx to fully
     enjoy better compatibility to the POSIX standard (which is probably why
     you use llkksshh over mmkksshh in the first place); --oo sshh (possibly additionally
     to the above) may be needed for some legacy scripts.

LLEEGGAACCYY MMOODDEE
     llkksshh currently has the following differences from mmkksshh:

     ++oo   The KSH_VERSION string identifies llkksshh as "LEGACY KSH" instead of
         "MIRBSD KSH".  Note that the rest of the version string is identical
         between the two shell flavours, and the behaviour and differences can
         change between versions; see the accompanying manual page mksh(1) for
         the versions this document applies to.

     ++oo   llkksshh uses POSIX arithmetic, which has quite a few implications: The
         data type for arithmetic operations is the host ISO C _l_o_n_g data type.
         Signed integer wraparound is Undefined Behaviour; this means that...

               $ echo $((2147483647 + 1))

         ... is permitted to, e.g. delete all files on your system (the figure
         differs for non-32-bit systems, the rule doesn't).  The sign of the
         result of a modulo operation with at least one negative operand is
         unspecified.  Shift operations on negative numbers are unspecified.
         Division of the largest negative number by -1 is Undefined Behaviour.
         The compiler is permitted to delete all data and crash the system if
         Undefined Behaviour occurs (see above for an example).

     ++oo   The rotation arithmetic operators are not available.

     ++oo   The shift arithmetic operators take all bits of the second operand
         into account; if they exceed permitted precision, the result is
         unspecified.

     ++oo   Unless sseett --oo ppoossiixx is active, llkksshh always uses traditional mode for
         constructs like:

               $ set -- $(getopt ab:c "$@")
               $ echo $?

         POSIX mandates this to show 0, but traditional mode passes through
         the errorlevel from the getopt(1) command.

     ++oo   Functions defined with the ffuunnccttiioonn reserved word share the shell
         options (sseett --oo) instead of locally scoping them.

SSEEEE AALLSSOO
     mksh(1)

     _h_t_t_p_:_/_/_w_w_w_._m_i_r_b_s_d_._o_r_g_/_m_k_s_h_._h_t_m

     _h_t_t_p_:_/_/_w_w_w_._m_i_r_b_s_d_._o_r_g_/_k_s_h_-_c_h_a_n_._h_t_m

CCAAVVEEAATTSS
     To use llkksshh as _/_b_i_n_/_s_h, compilation to enable sseett --oo ppoossiixx by default if
     called as sshh (adding -DMKSH_BINSHPOSIX to CPPFLAGS) is highly recommended
     for better standards compliance.

     For better compatibility with legacy scripts, such as many Debian main-
     tainer scripts, Upstart and SYSV init scripts, and other unfixed scripts,
     also adding the -DMKSH_BINSHREDUCED compile-time option to enable _b_o_t_h
     sseett --oo ppoossiixx --oo sshh when the shell is run as sshh, as well as integrating
     the optional disrecommended printf(1) builtin, might be necessary.

     llkksshh tries to make a cross between a legacy bourne/posix compatibl-ish
     shell and a legacy pdksh-alike but "legacy" is not exactly specified.

     Talk to the MirOS development team using the mailing list at
     <miros-mksh@mirbsd.org> or the #!/bin/mksh (or #ksh) IRC channel at
     _i_r_c_._f_r_e_e_n_o_d_e_._n_e_t (Port 6697 SSL, 6667 unencrypted) if you need any fur-
     ther quirks or assistance, and consider migrating your legacy scripts to
     work with mmkksshh instead of requiring llkksshh.

MirBSD                           April 2, 2017                          MirBSD
